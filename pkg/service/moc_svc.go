// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/interfaces.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/raedmajeed/admin-servcie/pkg/DOM"
	__ "github.com/raedmajeed/admin-servcie/pkg/pb"
)

// MockAdminAirlineService is a mock of AdminAirlineService interface.
type MockAdminAirlineService struct {
	ctrl     *gomock.Controller
	recorder *MockAdminAirlineServiceMockRecorder
}

// MockAdminAirlineServiceMockRecorder is the mock recorder for MockAdminAirlineService.
type MockAdminAirlineServiceMockRecorder struct {
	mock *MockAdminAirlineService
}

// NewMockAdminAirlineService creates a new mock instance.
func NewMockAdminAirlineService(ctrl *gomock.Controller) *MockAdminAirlineService {
	mock := &MockAdminAirlineService{ctrl: ctrl}
	mock.recorder = &MockAdminAirlineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminAirlineService) EXPECT() *MockAdminAirlineServiceMockRecorder {
	return m.recorder
}

// AcceptedAirlines mocks base method.
func (m *MockAdminAirlineService) AcceptedAirlines(ctx context.Context, p *__.EmptyRequest) (*__.AirlinesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptedAirlines", ctx, p)
	ret0, _ := ret[0].(*__.AirlinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptedAirlines indicates an expected call of AcceptedAirlines.
func (mr *MockAdminAirlineServiceMockRecorder) AcceptedAirlines(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptedAirlines", reflect.TypeOf((*MockAdminAirlineService)(nil).AcceptedAirlines), ctx, p)
}

// AddConfirmedSeatsToBooked mocks base method.
func (m *MockAdminAirlineService) AddConfirmedSeatsToBooked(arg0 context.Context, arg1 *__.ConfirmedSeatRequest) (*__.ConfirmedSeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConfirmedSeatsToBooked", arg0, arg1)
	ret0, _ := ret[0].(*__.ConfirmedSeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddConfirmedSeatsToBooked indicates an expected call of AddConfirmedSeatsToBooked.
func (mr *MockAdminAirlineServiceMockRecorder) AddConfirmedSeatsToBooked(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConfirmedSeatsToBooked", reflect.TypeOf((*MockAdminAirlineService)(nil).AddConfirmedSeatsToBooked), arg0, arg1)
}

// AddFlightToChart mocks base method.
func (m *MockAdminAirlineService) AddFlightToChart(p *__.FlightChartRequest) (*model.FlightChartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlightToChart", p)
	ret0, _ := ret[0].(*model.FlightChartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFlightToChart indicates an expected call of AddFlightToChart.
func (mr *MockAdminAirlineServiceMockRecorder) AddFlightToChart(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlightToChart", reflect.TypeOf((*MockAdminAirlineService)(nil).AddFlightToChart), p)
}

// AdminLogin mocks base method.
func (m *MockAdminAirlineService) AdminLogin(arg0 *__.LoginRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminLogin", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminLogin indicates an expected call of AdminLogin.
func (mr *MockAdminAirlineServiceMockRecorder) AdminLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminLogin", reflect.TypeOf((*MockAdminAirlineService)(nil).AdminLogin), arg0)
}

// AdminVerifyAirlineRequest mocks base method.
func (m *MockAdminAirlineService) AdminVerifyAirlineRequest(arg0 int) (*model.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminVerifyAirlineRequest", arg0)
	ret0, _ := ret[0].(*model.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminVerifyAirlineRequest indicates an expected call of AdminVerifyAirlineRequest.
func (mr *MockAdminAirlineServiceMockRecorder) AdminVerifyAirlineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminVerifyAirlineRequest", reflect.TypeOf((*MockAdminAirlineService)(nil).AdminVerifyAirlineRequest), arg0)
}

// AirlineForgotPassword mocks base method.
func (m *MockAdminAirlineService) AirlineForgotPassword(arg0 *__.ForgotPasswordRequest) (*model.OtpData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AirlineForgotPassword", arg0)
	ret0, _ := ret[0].(*model.OtpData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AirlineForgotPassword indicates an expected call of AirlineForgotPassword.
func (mr *MockAdminAirlineServiceMockRecorder) AirlineForgotPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AirlineForgotPassword", reflect.TypeOf((*MockAdminAirlineService)(nil).AirlineForgotPassword), arg0)
}

// AirlineLogin mocks base method.
func (m *MockAdminAirlineService) AirlineLogin(arg0 *__.LoginRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AirlineLogin", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AirlineLogin indicates an expected call of AirlineLogin.
func (mr *MockAdminAirlineServiceMockRecorder) AirlineLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AirlineLogin", reflect.TypeOf((*MockAdminAirlineService)(nil).AirlineLogin), arg0)
}

// CalculateDailyFare mocks base method.
func (m *MockAdminAirlineService) CalculateDailyFare() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CalculateDailyFare")
}

// CalculateDailyFare indicates an expected call of CalculateDailyFare.
func (mr *MockAdminAirlineServiceMockRecorder) CalculateDailyFare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateDailyFare", reflect.TypeOf((*MockAdminAirlineService)(nil).CalculateDailyFare))
}

// CreateAirlineBaggagePolicy mocks base method.
func (m *MockAdminAirlineService) CreateAirlineBaggagePolicy(arg0 *__.AirlineBaggageRequest) (*model.AirlineBaggage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirlineBaggagePolicy", arg0)
	ret0, _ := ret[0].(*model.AirlineBaggage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirlineBaggagePolicy indicates an expected call of CreateAirlineBaggagePolicy.
func (mr *MockAdminAirlineServiceMockRecorder) CreateAirlineBaggagePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirlineBaggagePolicy", reflect.TypeOf((*MockAdminAirlineService)(nil).CreateAirlineBaggagePolicy), arg0)
}

// CreateAirlineCancellationPolicy mocks base method.
func (m *MockAdminAirlineService) CreateAirlineCancellationPolicy(arg0 *__.AirlineCancellationRequest) (*model.AirlineCancellation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirlineCancellationPolicy", arg0)
	ret0, _ := ret[0].(*model.AirlineCancellation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirlineCancellationPolicy indicates an expected call of CreateAirlineCancellationPolicy.
func (mr *MockAdminAirlineServiceMockRecorder) CreateAirlineCancellationPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirlineCancellationPolicy", reflect.TypeOf((*MockAdminAirlineService)(nil).CreateAirlineCancellationPolicy), arg0)
}

// CreateAirlineSeats mocks base method.
func (m *MockAdminAirlineService) CreateAirlineSeats(arg0 *__.AirlineSeatRequest) (*model.AirlineSeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirlineSeats", arg0)
	ret0, _ := ret[0].(*model.AirlineSeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirlineSeats indicates an expected call of CreateAirlineSeats.
func (mr *MockAdminAirlineServiceMockRecorder) CreateAirlineSeats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirlineSeats", reflect.TypeOf((*MockAdminAirlineService)(nil).CreateAirlineSeats), arg0)
}

// CreateAirport mocks base method.
func (m *MockAdminAirlineService) CreateAirport(arg0 *__.Airport) (*model.Airport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirport", arg0)
	ret0, _ := ret[0].(*model.Airport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirport indicates an expected call of CreateAirport.
func (mr *MockAdminAirlineServiceMockRecorder) CreateAirport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirport", reflect.TypeOf((*MockAdminAirlineService)(nil).CreateAirport), arg0)
}

// CreateFlightFleet mocks base method.
func (m *MockAdminAirlineService) CreateFlightFleet(arg0 *__.FlightFleetRequest) (*model.FlightFleetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlightFleet", arg0)
	ret0, _ := ret[0].(*model.FlightFleetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlightFleet indicates an expected call of CreateFlightFleet.
func (mr *MockAdminAirlineServiceMockRecorder) CreateFlightFleet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlightFleet", reflect.TypeOf((*MockAdminAirlineService)(nil).CreateFlightFleet), arg0)
}

// CreateFlightType mocks base method.
func (m *MockAdminAirlineService) CreateFlightType(arg0 *__.FlightTypeRequest) (*model.FlightTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlightType", arg0)
	ret0, _ := ret[0].(*model.FlightTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlightType indicates an expected call of CreateFlightType.
func (mr *MockAdminAirlineServiceMockRecorder) CreateFlightType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlightType", reflect.TypeOf((*MockAdminAirlineService)(nil).CreateFlightType), arg0)
}

// CreateSchedules mocks base method.
func (m *MockAdminAirlineService) CreateSchedules(arg0 *__.ScheduleRequest) (*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedules", arg0)
	ret0, _ := ret[0].(*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedules indicates an expected call of CreateSchedules.
func (mr *MockAdminAirlineServiceMockRecorder) CreateSchedules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedules", reflect.TypeOf((*MockAdminAirlineService)(nil).CreateSchedules), arg0)
}

// DeleteAirlineBaggage mocks base method.
func (m *MockAdminAirlineService) DeleteAirlineBaggage(ctx context.Context, p *__.FetchRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAirlineBaggage", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAirlineBaggage indicates an expected call of DeleteAirlineBaggage.
func (mr *MockAdminAirlineServiceMockRecorder) DeleteAirlineBaggage(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAirlineBaggage", reflect.TypeOf((*MockAdminAirlineService)(nil).DeleteAirlineBaggage), ctx, p)
}

// DeleteAirlineCancellation mocks base method.
func (m *MockAdminAirlineService) DeleteAirlineCancellation(ctx context.Context, p *__.FetchRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAirlineCancellation", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAirlineCancellation indicates an expected call of DeleteAirlineCancellation.
func (mr *MockAdminAirlineServiceMockRecorder) DeleteAirlineCancellation(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAirlineCancellation", reflect.TypeOf((*MockAdminAirlineService)(nil).DeleteAirlineCancellation), ctx, p)
}

// DeleteAirlineSeat mocks base method.
func (m *MockAdminAirlineService) DeleteAirlineSeat(ctx context.Context, p *__.FetchRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAirlineSeat", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAirlineSeat indicates an expected call of DeleteAirlineSeat.
func (mr *MockAdminAirlineServiceMockRecorder) DeleteAirlineSeat(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAirlineSeat", reflect.TypeOf((*MockAdminAirlineService)(nil).DeleteAirlineSeat), ctx, p)
}

// DeleteAirport mocks base method.
func (m *MockAdminAirlineService) DeleteAirport(ctx context.Context, p *__.AirportRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAirport", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAirport indicates an expected call of DeleteAirport.
func (mr *MockAdminAirlineServiceMockRecorder) DeleteAirport(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAirport", reflect.TypeOf((*MockAdminAirlineService)(nil).DeleteAirport), ctx, p)
}

// DeleteFlightFleet mocks base method.
func (m *MockAdminAirlineService) DeleteFlightFleet(ctx context.Context, p *__.FetchRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlightFleet", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlightFleet indicates an expected call of DeleteFlightFleet.
func (mr *MockAdminAirlineServiceMockRecorder) DeleteFlightFleet(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlightFleet", reflect.TypeOf((*MockAdminAirlineService)(nil).DeleteFlightFleet), ctx, p)
}

// DeleteFlightType mocks base method.
func (m *MockAdminAirlineService) DeleteFlightType(id int) (*model.FlightTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlightType", id)
	ret0, _ := ret[0].(*model.FlightTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFlightType indicates an expected call of DeleteFlightType.
func (mr *MockAdminAirlineServiceMockRecorder) DeleteFlightType(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlightType", reflect.TypeOf((*MockAdminAirlineService)(nil).DeleteFlightType), id)
}

// FetchAirlineBaggage mocks base method.
func (m *MockAdminAirlineService) FetchAirlineBaggage(ctx context.Context, p *__.FetchRequest) (*__.AirlineBaggageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAirlineBaggage", ctx, p)
	ret0, _ := ret[0].(*__.AirlineBaggageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAirlineBaggage indicates an expected call of FetchAirlineBaggage.
func (mr *MockAdminAirlineServiceMockRecorder) FetchAirlineBaggage(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAirlineBaggage", reflect.TypeOf((*MockAdminAirlineService)(nil).FetchAirlineBaggage), ctx, p)
}

// FetchAirlineCancellation mocks base method.
func (m *MockAdminAirlineService) FetchAirlineCancellation(ctx context.Context, p *__.FetchRequest) (*__.AirlineCancellationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAirlineCancellation", ctx, p)
	ret0, _ := ret[0].(*__.AirlineCancellationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAirlineCancellation indicates an expected call of FetchAirlineCancellation.
func (mr *MockAdminAirlineServiceMockRecorder) FetchAirlineCancellation(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAirlineCancellation", reflect.TypeOf((*MockAdminAirlineService)(nil).FetchAirlineCancellation), ctx, p)
}

// FetchAirlineSeat mocks base method.
func (m *MockAdminAirlineService) FetchAirlineSeat(ctx context.Context, p *__.FetchRequest) (*__.AirlineSeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAirlineSeat", ctx, p)
	ret0, _ := ret[0].(*__.AirlineSeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAirlineSeat indicates an expected call of FetchAirlineSeat.
func (mr *MockAdminAirlineServiceMockRecorder) FetchAirlineSeat(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAirlineSeat", reflect.TypeOf((*MockAdminAirlineService)(nil).FetchAirlineSeat), ctx, p)
}

// FetchAllAirlineBaggages mocks base method.
func (m *MockAdminAirlineService) FetchAllAirlineBaggages(ctx context.Context, p *__.FetchRequest) (*__.AirlineBaggagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllAirlineBaggages", ctx, p)
	ret0, _ := ret[0].(*__.AirlineBaggagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllAirlineBaggages indicates an expected call of FetchAllAirlineBaggages.
func (mr *MockAdminAirlineServiceMockRecorder) FetchAllAirlineBaggages(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllAirlineBaggages", reflect.TypeOf((*MockAdminAirlineService)(nil).FetchAllAirlineBaggages), ctx, p)
}

// FetchAllAirlineCancellations mocks base method.
func (m *MockAdminAirlineService) FetchAllAirlineCancellations(ctx context.Context, p *__.FetchRequest) (*__.AirlineCancellationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllAirlineCancellations", ctx, p)
	ret0, _ := ret[0].(*__.AirlineCancellationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllAirlineCancellations indicates an expected call of FetchAllAirlineCancellations.
func (mr *MockAdminAirlineServiceMockRecorder) FetchAllAirlineCancellations(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllAirlineCancellations", reflect.TypeOf((*MockAdminAirlineService)(nil).FetchAllAirlineCancellations), ctx, p)
}

// FetchAllAirlineSeats mocks base method.
func (m *MockAdminAirlineService) FetchAllAirlineSeats(ctx context.Context, p *__.FetchRequest) (*__.AirlineSeatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllAirlineSeats", ctx, p)
	ret0, _ := ret[0].(*__.AirlineSeatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllAirlineSeats indicates an expected call of FetchAllAirlineSeats.
func (mr *MockAdminAirlineServiceMockRecorder) FetchAllAirlineSeats(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllAirlineSeats", reflect.TypeOf((*MockAdminAirlineService)(nil).FetchAllAirlineSeats), ctx, p)
}

// FetchAllAirlines mocks base method.
func (m *MockAdminAirlineService) FetchAllAirlines(ctx context.Context, p *__.EmptyRequest) (*__.AirlinesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllAirlines", ctx, p)
	ret0, _ := ret[0].(*__.AirlinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllAirlines indicates an expected call of FetchAllAirlines.
func (mr *MockAdminAirlineServiceMockRecorder) FetchAllAirlines(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllAirlines", reflect.TypeOf((*MockAdminAirlineService)(nil).FetchAllAirlines), ctx, p)
}

// GetAirport mocks base method.
func (m *MockAdminAirlineService) GetAirport(ctx context.Context, p *__.AirportRequest) (*__.AirportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAirport", ctx, p)
	ret0, _ := ret[0].(*__.AirportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAirport indicates an expected call of GetAirport.
func (mr *MockAdminAirlineServiceMockRecorder) GetAirport(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAirport", reflect.TypeOf((*MockAdminAirlineService)(nil).GetAirport), ctx, p)
}

// GetAirports mocks base method.
func (m *MockAdminAirlineService) GetAirports(ctx context.Context, p *__.EmptyRequest) (*__.AirportsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAirports", ctx, p)
	ret0, _ := ret[0].(*__.AirportsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAirports indicates an expected call of GetAirports.
func (mr *MockAdminAirlineServiceMockRecorder) GetAirports(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAirports", reflect.TypeOf((*MockAdminAirlineService)(nil).GetAirports), ctx, p)
}

// GetAllFlightTypes mocks base method.
func (m *MockAdminAirlineService) GetAllFlightTypes() ([]model.FlightTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFlightTypes")
	ret0, _ := ret[0].([]model.FlightTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFlightTypes indicates an expected call of GetAllFlightTypes.
func (mr *MockAdminAirlineServiceMockRecorder) GetAllFlightTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFlightTypes", reflect.TypeOf((*MockAdminAirlineService)(nil).GetAllFlightTypes))
}

// GetFlightChart mocks base method.
func (m *MockAdminAirlineService) GetFlightChart(ctx context.Context, p *__.GetChartRequest) (*__.FlightChartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightChart", ctx, p)
	ret0, _ := ret[0].(*__.FlightChartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightChart indicates an expected call of GetFlightChart.
func (mr *MockAdminAirlineServiceMockRecorder) GetFlightChart(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightChart", reflect.TypeOf((*MockAdminAirlineService)(nil).GetFlightChart), ctx, p)
}

// GetFlightChartForAirline mocks base method.
func (m *MockAdminAirlineService) GetFlightChartForAirline(ctx context.Context, p *__.FetchRequest) (*__.FlightChartsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightChartForAirline", ctx, p)
	ret0, _ := ret[0].(*__.FlightChartsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightChartForAirline indicates an expected call of GetFlightChartForAirline.
func (mr *MockAdminAirlineServiceMockRecorder) GetFlightChartForAirline(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightChartForAirline", reflect.TypeOf((*MockAdminAirlineService)(nil).GetFlightChartForAirline), ctx, p)
}

// GetFlightCharts mocks base method.
func (m *MockAdminAirlineService) GetFlightCharts(ctx context.Context, p *__.EmptyRequest) (*__.FlightChartsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightCharts", ctx, p)
	ret0, _ := ret[0].(*__.FlightChartsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightCharts indicates an expected call of GetFlightCharts.
func (mr *MockAdminAirlineServiceMockRecorder) GetFlightCharts(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightCharts", reflect.TypeOf((*MockAdminAirlineService)(nil).GetFlightCharts), ctx, p)
}

// GetFlightFleet mocks base method.
func (m *MockAdminAirlineService) GetFlightFleet(ctx context.Context, p *__.FetchRequest) (*__.FlightFleetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightFleet", ctx, p)
	ret0, _ := ret[0].(*__.FlightFleetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightFleet indicates an expected call of GetFlightFleet.
func (mr *MockAdminAirlineServiceMockRecorder) GetFlightFleet(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightFleet", reflect.TypeOf((*MockAdminAirlineService)(nil).GetFlightFleet), ctx, p)
}

// GetFlightFleets mocks base method.
func (m *MockAdminAirlineService) GetFlightFleets(ctx context.Context, p *__.FetchRequest) (*__.FlightFleetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightFleets", ctx, p)
	ret0, _ := ret[0].(*__.FlightFleetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightFleets indicates an expected call of GetFlightFleets.
func (mr *MockAdminAirlineServiceMockRecorder) GetFlightFleets(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightFleets", reflect.TypeOf((*MockAdminAirlineService)(nil).GetFlightFleets), ctx, p)
}

// GetFlightType mocks base method.
func (m *MockAdminAirlineService) GetFlightType(arg0 int32) (*model.FlightTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightType", arg0)
	ret0, _ := ret[0].(*model.FlightTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightType indicates an expected call of GetFlightType.
func (mr *MockAdminAirlineServiceMockRecorder) GetFlightType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightType", reflect.TypeOf((*MockAdminAirlineService)(nil).GetFlightType), arg0)
}

// GetSchedules mocks base method.
func (m *MockAdminAirlineService) GetSchedules(ctx context.Context, p *__.EmptyRequest) (*__.SchedulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedules", ctx, p)
	ret0, _ := ret[0].(*__.SchedulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedules indicates an expected call of GetSchedules.
func (mr *MockAdminAirlineServiceMockRecorder) GetSchedules(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedules", reflect.TypeOf((*MockAdminAirlineService)(nil).GetSchedules), ctx, p)
}

// RegisterAirlineSvc mocks base method.
func (m *MockAdminAirlineService) RegisterAirlineSvc(arg0 *__.AirlineRequest) (*model.RegisterAirlineOtpData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAirlineSvc", arg0)
	ret0, _ := ret[0].(*model.RegisterAirlineOtpData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAirlineSvc indicates an expected call of RegisterAirlineSvc.
func (mr *MockAdminAirlineServiceMockRecorder) RegisterAirlineSvc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAirlineSvc", reflect.TypeOf((*MockAdminAirlineService)(nil).RegisterAirlineSvc), arg0)
}

// RejectedAirlines mocks base method.
func (m *MockAdminAirlineService) RejectedAirlines(ctx context.Context, p *__.EmptyRequest) (*__.AirlinesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectedAirlines", ctx, p)
	ret0, _ := ret[0].(*__.AirlinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectedAirlines indicates an expected call of RejectedAirlines.
func (mr *MockAdminAirlineServiceMockRecorder) RejectedAirlines(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectedAirlines", reflect.TypeOf((*MockAdminAirlineService)(nil).RejectedAirlines), ctx, p)
}

// SearchFlight mocks base method.
func (m *MockAdminAirlineService) SearchFlight(search model.SearchDetails) ([]model.Path, []model.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFlight", search)
	ret0, _ := ret[0].([]model.Path)
	ret1, _ := ret[1].([]model.Path)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchFlight indicates an expected call of SearchFlight.
func (mr *MockAdminAirlineServiceMockRecorder) SearchFlight(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFlight", reflect.TypeOf((*MockAdminAirlineService)(nil).SearchFlight), search)
}

// SearchFlightInitial mocks base method.
func (m *MockAdminAirlineService) SearchFlightInitial(ctx context.Context, p *__.SearchFlightRequestAdmin) (*__.SearchFlightResponseAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFlightInitial", ctx, p)
	ret0, _ := ret[0].(*__.SearchFlightResponseAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFlightInitial indicates an expected call of SearchFlightInitial.
func (mr *MockAdminAirlineServiceMockRecorder) SearchFlightInitial(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFlightInitial", reflect.TypeOf((*MockAdminAirlineService)(nil).SearchFlightInitial), ctx, p)
}

// SearchSelectFlight mocks base method.
func (m *MockAdminAirlineService) SearchSelectFlight(arg0 context.Context, arg1 *__.SelectFlightAdmin) (*__.CompleteFlightDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSelectFlight", arg0, arg1)
	ret0, _ := ret[0].(*__.CompleteFlightDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSelectFlight indicates an expected call of SearchSelectFlight.
func (mr *MockAdminAirlineServiceMockRecorder) SearchSelectFlight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSelectFlight", reflect.TypeOf((*MockAdminAirlineService)(nil).SearchSelectFlight), arg0, arg1)
}

// SelectAndBookSeats mocks base method.
func (m *MockAdminAirlineService) SelectAndBookSeats(ctx context.Context, request *__.SeatRequest) (*__.SeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAndBookSeats", ctx, request)
	ret0, _ := ret[0].(*__.SeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAndBookSeats indicates an expected call of SelectAndBookSeats.
func (mr *MockAdminAirlineServiceMockRecorder) SelectAndBookSeats(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAndBookSeats", reflect.TypeOf((*MockAdminAirlineService)(nil).SelectAndBookSeats), ctx, request)
}

// UpdateAirlinePassword mocks base method.
func (m *MockAdminAirlineService) UpdateAirlinePassword(arg0 *__.ConfirmPasswordRequest, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAirlinePassword", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAirlinePassword indicates an expected call of UpdateAirlinePassword.
func (mr *MockAdminAirlineServiceMockRecorder) UpdateAirlinePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAirlinePassword", reflect.TypeOf((*MockAdminAirlineService)(nil).UpdateAirlinePassword), arg0, arg1)
}

// UpdateFlightType mocks base method.
func (m *MockAdminAirlineService) UpdateFlightType(arg0 *__.FlightTypeRequest, arg1 int) (*model.FlightTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlightType", arg0, arg1)
	ret0, _ := ret[0].(*model.FlightTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlightType indicates an expected call of UpdateFlightType.
func (mr *MockAdminAirlineServiceMockRecorder) UpdateFlightType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlightType", reflect.TypeOf((*MockAdminAirlineService)(nil).UpdateFlightType), arg0, arg1)
}

// VerifyAirlineRequest mocks base method.
func (m *MockAdminAirlineService) VerifyAirlineRequest(arg0 *__.OTPRequest) (*model.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAirlineRequest", arg0)
	ret0, _ := ret[0].(*model.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAirlineRequest indicates an expected call of VerifyAirlineRequest.
func (mr *MockAdminAirlineServiceMockRecorder) VerifyAirlineRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAirlineRequest", reflect.TypeOf((*MockAdminAirlineService)(nil).VerifyAirlineRequest), arg0)
}

// VerifyOTP mocks base method.
func (m *MockAdminAirlineService) VerifyOTP(arg0 *__.OTPRequest) (*model.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", arg0)
	ret0, _ := ret[0].(*model.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockAdminAirlineServiceMockRecorder) VerifyOTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockAdminAirlineService)(nil).VerifyOTP), arg0)
}
