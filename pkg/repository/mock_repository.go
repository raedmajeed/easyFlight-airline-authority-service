// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/raedmajeed/admin-servcie/pkg/DOM"
	__ "github.com/raedmajeed/admin-servcie/pkg/pb"
)

// MockAdminAirlineRepostory is a mock of AdminAirlineRepostory interface.
type MockAdminAirlineRepostory struct {
	ctrl     *gomock.Controller
	recorder *MockAdminAirlineRepostoryMockRecorder
}

// MockAdminAirlineRepostoryMockRecorder is the mock recorder for MockAdminAirlineRepostory.
type MockAdminAirlineRepostoryMockRecorder struct {
	mock *MockAdminAirlineRepostory
}

// NewMockAdminAirlineRepostory creates a new mock instance.
func NewMockAdminAirlineRepostory(ctrl *gomock.Controller) *MockAdminAirlineRepostory {
	mock := &MockAdminAirlineRepostory{ctrl: ctrl}
	mock.recorder = &MockAdminAirlineRepostoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminAirlineRepostory) EXPECT() *MockAdminAirlineRepostoryMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockAdminAirlineRepostory) Convert(d, a string, id uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Convert", d, a, id)
}

// Convert indicates an expected call of Convert.
func (mr *MockAdminAirlineRepostoryMockRecorder) Convert(d, a, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).Convert), d, a, id)
}

// CreateAirline mocks base method.
func (m *MockAdminAirlineRepostory) CreateAirline(airline *model.Airline) (*model.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirline", airline)
	ret0, _ := ret[0].(*model.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirline indicates an expected call of CreateAirline.
func (mr *MockAdminAirlineRepostoryMockRecorder) CreateAirline(airline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirline", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).CreateAirline), airline)
}

// CreateAirlineBaggagePolicy mocks base method.
func (m *MockAdminAirlineRepostory) CreateAirlineBaggagePolicy(arg0 *__.AirlineBaggageRequest, arg1 int) (*model.AirlineBaggage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirlineBaggagePolicy", arg0, arg1)
	ret0, _ := ret[0].(*model.AirlineBaggage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirlineBaggagePolicy indicates an expected call of CreateAirlineBaggagePolicy.
func (mr *MockAdminAirlineRepostoryMockRecorder) CreateAirlineBaggagePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirlineBaggagePolicy", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).CreateAirlineBaggagePolicy), arg0, arg1)
}

// CreateAirlineCancellationPolicy mocks base method.
func (m *MockAdminAirlineRepostory) CreateAirlineCancellationPolicy(arg0 *__.AirlineCancellationRequest, arg1 int) (*model.AirlineCancellation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirlineCancellationPolicy", arg0, arg1)
	ret0, _ := ret[0].(*model.AirlineCancellation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirlineCancellationPolicy indicates an expected call of CreateAirlineCancellationPolicy.
func (mr *MockAdminAirlineRepostoryMockRecorder) CreateAirlineCancellationPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirlineCancellationPolicy", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).CreateAirlineCancellationPolicy), arg0, arg1)
}

// CreateAirlineSeatType mocks base method.
func (m *MockAdminAirlineRepostory) CreateAirlineSeatType(arg0 int, arg1 *__.AirlineSeatRequest, arg2, arg3 []byte) (*model.AirlineSeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirlineSeatType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*model.AirlineSeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirlineSeatType indicates an expected call of CreateAirlineSeatType.
func (mr *MockAdminAirlineRepostoryMockRecorder) CreateAirlineSeatType(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirlineSeatType", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).CreateAirlineSeatType), arg0, arg1, arg2, arg3)
}

// CreateAirport mocks base method.
func (m *MockAdminAirlineRepostory) CreateAirport(arg0 *__.Airport) (*model.Airport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAirport", arg0)
	ret0, _ := ret[0].(*model.Airport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAirport indicates an expected call of CreateAirport.
func (mr *MockAdminAirlineRepostoryMockRecorder) CreateAirport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAirport", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).CreateAirport), arg0)
}

// CreateFlightChart mocks base method.
func (m *MockAdminAirlineRepostory) CreateFlightChart(flightChart *model.FlightChart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlightChart", flightChart)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFlightChart indicates an expected call of CreateFlightChart.
func (mr *MockAdminAirlineRepostoryMockRecorder) CreateFlightChart(flightChart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlightChart", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).CreateFlightChart), flightChart)
}

// CreateFlightFleet mocks base method.
func (m *MockAdminAirlineRepostory) CreateFlightFleet(fl *model.FlightFleets) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlightFleet", fl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFlightFleet indicates an expected call of CreateFlightFleet.
func (mr *MockAdminAirlineRepostoryMockRecorder) CreateFlightFleet(fl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlightFleet", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).CreateFlightFleet), fl)
}

// CreateFlightType mocks base method.
func (m *MockAdminAirlineRepostory) CreateFlightType(arg0 *__.FlightTypeRequest) (*model.FlightTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlightType", arg0)
	ret0, _ := ret[0].(*model.FlightTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlightType indicates an expected call of CreateFlightType.
func (mr *MockAdminAirlineRepostoryMockRecorder) CreateFlightType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlightType", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).CreateFlightType), arg0)
}

// CreateSchedules mocks base method.
func (m *MockAdminAirlineRepostory) CreateSchedules(schedule *model.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedules", schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchedules indicates an expected call of CreateSchedules.
func (mr *MockAdminAirlineRepostoryMockRecorder) CreateSchedules(schedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedules", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).CreateSchedules), schedule)
}

// DeleteAirlineBaggage mocks base method.
func (m *MockAdminAirlineRepostory) DeleteAirlineBaggage(string2 uint, string3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAirlineBaggage", string2, string3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAirlineBaggage indicates an expected call of DeleteAirlineBaggage.
func (mr *MockAdminAirlineRepostoryMockRecorder) DeleteAirlineBaggage(string2, string3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAirlineBaggage", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).DeleteAirlineBaggage), string2, string3)
}

// DeleteAirlineCancellation mocks base method.
func (m *MockAdminAirlineRepostory) DeleteAirlineCancellation(string2 uint, string3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAirlineCancellation", string2, string3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAirlineCancellation indicates an expected call of DeleteAirlineCancellation.
func (mr *MockAdminAirlineRepostoryMockRecorder) DeleteAirlineCancellation(string2, string3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAirlineCancellation", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).DeleteAirlineCancellation), string2, string3)
}

// DeleteAirlineSeat mocks base method.
func (m *MockAdminAirlineRepostory) DeleteAirlineSeat(string2 uint, string3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAirlineSeat", string2, string3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAirlineSeat indicates an expected call of DeleteAirlineSeat.
func (mr *MockAdminAirlineRepostoryMockRecorder) DeleteAirlineSeat(string2, string3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAirlineSeat", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).DeleteAirlineSeat), string2, string3)
}

// DeleteAirportByCode mocks base method.
func (m *MockAdminAirlineRepostory) DeleteAirportByCode(string2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAirportByCode", string2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAirportByCode indicates an expected call of DeleteAirportByCode.
func (mr *MockAdminAirlineRepostoryMockRecorder) DeleteAirportByCode(string2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAirportByCode", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).DeleteAirportByCode), string2)
}

// DeleteFlightFleet mocks base method.
func (m *MockAdminAirlineRepostory) DeleteFlightFleet(string2 uint, string3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlightFleet", string2, string3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlightFleet indicates an expected call of DeleteFlightFleet.
func (mr *MockAdminAirlineRepostoryMockRecorder) DeleteFlightFleet(string2, string3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlightFleet", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).DeleteFlightFleet), string2, string3)
}

// DeleteFlightType mocks base method.
func (m *MockAdminAirlineRepostory) DeleteFlightType(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlightType", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlightType indicates an expected call of DeleteFlightType.
func (mr *MockAdminAirlineRepostoryMockRecorder) DeleteFlightType(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlightType", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).DeleteFlightType), id)
}

// FetchAirlineBaggage mocks base method.
func (m *MockAdminAirlineRepostory) FetchAirlineBaggage(string2 uint, string3 string) (model.AirlineBaggage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAirlineBaggage", string2, string3)
	ret0, _ := ret[0].(model.AirlineBaggage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAirlineBaggage indicates an expected call of FetchAirlineBaggage.
func (mr *MockAdminAirlineRepostoryMockRecorder) FetchAirlineBaggage(string2, string3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAirlineBaggage", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FetchAirlineBaggage), string2, string3)
}

// FetchAirlineCancellation mocks base method.
func (m *MockAdminAirlineRepostory) FetchAirlineCancellation(string2 uint, string3 string) (model.AirlineCancellation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAirlineCancellation", string2, string3)
	ret0, _ := ret[0].(model.AirlineCancellation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAirlineCancellation indicates an expected call of FetchAirlineCancellation.
func (mr *MockAdminAirlineRepostoryMockRecorder) FetchAirlineCancellation(string2, string3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAirlineCancellation", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FetchAirlineCancellation), string2, string3)
}

// FetchAirlineSeat mocks base method.
func (m *MockAdminAirlineRepostory) FetchAirlineSeat(string2 uint, string3 string) (model.AirlineSeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAirlineSeat", string2, string3)
	ret0, _ := ret[0].(model.AirlineSeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAirlineSeat indicates an expected call of FetchAirlineSeat.
func (mr *MockAdminAirlineRepostoryMockRecorder) FetchAirlineSeat(string2, string3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAirlineSeat", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FetchAirlineSeat), string2, string3)
}

// FetchAllAirlineBaggages mocks base method.
func (m *MockAdminAirlineRepostory) FetchAllAirlineBaggages(string2 uint) ([]model.AirlineBaggage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllAirlineBaggages", string2)
	ret0, _ := ret[0].([]model.AirlineBaggage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllAirlineBaggages indicates an expected call of FetchAllAirlineBaggages.
func (mr *MockAdminAirlineRepostoryMockRecorder) FetchAllAirlineBaggages(string2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllAirlineBaggages", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FetchAllAirlineBaggages), string2)
}

// FetchAllAirlineCancellations mocks base method.
func (m *MockAdminAirlineRepostory) FetchAllAirlineCancellations(string2 uint) ([]model.AirlineCancellation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllAirlineCancellations", string2)
	ret0, _ := ret[0].([]model.AirlineCancellation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllAirlineCancellations indicates an expected call of FetchAllAirlineCancellations.
func (mr *MockAdminAirlineRepostoryMockRecorder) FetchAllAirlineCancellations(string2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllAirlineCancellations", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FetchAllAirlineCancellations), string2)
}

// FetchAllAirlineSeats mocks base method.
func (m *MockAdminAirlineRepostory) FetchAllAirlineSeats(string2 uint) ([]model.AirlineSeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllAirlineSeats", string2)
	ret0, _ := ret[0].([]model.AirlineSeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllAirlineSeats indicates an expected call of FetchAllAirlineSeats.
func (mr *MockAdminAirlineRepostoryMockRecorder) FetchAllAirlineSeats(string2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllAirlineSeats", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FetchAllAirlineSeats), string2)
}

// FindAdminByEmail mocks base method.
func (m *MockAdminAirlineRepostory) FindAdminByEmail(p *__.LoginRequest) (*model.AdminTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAdminByEmail", p)
	ret0, _ := ret[0].(*model.AdminTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAdminByEmail indicates an expected call of FindAdminByEmail.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAdminByEmail(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAdminByEmail", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAdminByEmail), p)
}

// FindAirlineBaggageByid mocks base method.
func (m *MockAdminAirlineRepostory) FindAirlineBaggageByid(id int32) (*model.AirlineBaggage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAirlineBaggageByid", id)
	ret0, _ := ret[0].(*model.AirlineBaggage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAirlineBaggageByid indicates an expected call of FindAirlineBaggageByid.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAirlineBaggageByid(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAirlineBaggageByid", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAirlineBaggageByid), id)
}

// FindAirlineByEmail mocks base method.
func (m *MockAdminAirlineRepostory) FindAirlineByEmail(arg0 string) (*model.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAirlineByEmail", arg0)
	ret0, _ := ret[0].(*model.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAirlineByEmail indicates an expected call of FindAirlineByEmail.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAirlineByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAirlineByEmail", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAirlineByEmail), arg0)
}

// FindAirlineById mocks base method.
func (m *MockAdminAirlineRepostory) FindAirlineById(id int32) (*model.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAirlineById", id)
	ret0, _ := ret[0].(*model.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAirlineById indicates an expected call of FindAirlineById.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAirlineById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAirlineById", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAirlineById), id)
}

// FindAirlineCancellationByid mocks base method.
func (m *MockAdminAirlineRepostory) FindAirlineCancellationByid(id int32) (*model.AirlineCancellation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAirlineCancellationByid", id)
	ret0, _ := ret[0].(*model.AirlineCancellation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAirlineCancellationByid indicates an expected call of FindAirlineCancellationByid.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAirlineCancellationByid(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAirlineCancellationByid", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAirlineCancellationByid), id)
}

// FindAirlinePassword mocks base method.
func (m *MockAdminAirlineRepostory) FindAirlinePassword(arg0 *__.LoginRequest) (*model.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAirlinePassword", arg0)
	ret0, _ := ret[0].(*model.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAirlinePassword indicates an expected call of FindAirlinePassword.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAirlinePassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAirlinePassword", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAirlinePassword), arg0)
}

// FindAirlineSeatByid mocks base method.
func (m *MockAdminAirlineRepostory) FindAirlineSeatByid(id int32) (*model.AirlineSeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAirlineSeatByid", id)
	ret0, _ := ret[0].(*model.AirlineSeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAirlineSeatByid indicates an expected call of FindAirlineSeatByid.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAirlineSeatByid(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAirlineSeatByid", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAirlineSeatByid), id)
}

// FindAirportByAirportCode mocks base method.
func (m *MockAdminAirlineRepostory) FindAirportByAirportCode(arg0 string) (*model.Airport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAirportByAirportCode", arg0)
	ret0, _ := ret[0].(*model.Airport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAirportByAirportCode indicates an expected call of FindAirportByAirportCode.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAirportByAirportCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAirportByAirportCode", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAirportByAirportCode), arg0)
}

// FindAllAcceptedAirlines mocks base method.
func (m *MockAdminAirlineRepostory) FindAllAcceptedAirlines() ([]model.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllAcceptedAirlines")
	ret0, _ := ret[0].([]model.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllAcceptedAirlines indicates an expected call of FindAllAcceptedAirlines.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAllAcceptedAirlines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAcceptedAirlines", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAllAcceptedAirlines))
}

// FindAllAirlines mocks base method.
func (m *MockAdminAirlineRepostory) FindAllAirlines() ([]model.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllAirlines")
	ret0, _ := ret[0].([]model.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllAirlines indicates an expected call of FindAllAirlines.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAllAirlines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAirlines", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAllAirlines))
}

// FindAllAirports mocks base method.
func (m *MockAdminAirlineRepostory) FindAllAirports() ([]model.Airport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllAirports")
	ret0, _ := ret[0].([]model.Airport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllAirports indicates an expected call of FindAllAirports.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAllAirports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAirports", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAllAirports))
}

// FindAllBookedSeats mocks base method.
func (m *MockAdminAirlineRepostory) FindAllBookedSeats() ([]model.BookedSeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBookedSeats")
	ret0, _ := ret[0].([]model.BookedSeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBookedSeats indicates an expected call of FindAllBookedSeats.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAllBookedSeats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBookedSeats", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAllBookedSeats))
}

// FindAllFlightChart mocks base method.
func (m *MockAdminAirlineRepostory) FindAllFlightChart() ([]model.FlightChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllFlightChart")
	ret0, _ := ret[0].([]model.FlightChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllFlightChart indicates an expected call of FindAllFlightChart.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAllFlightChart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllFlightChart", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAllFlightChart))
}

// FindAllFlightTypes mocks base method.
func (m *MockAdminAirlineRepostory) FindAllFlightTypes() ([]model.FlightTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllFlightTypes")
	ret0, _ := ret[0].([]model.FlightTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllFlightTypes indicates an expected call of FindAllFlightTypes.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAllFlightTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllFlightTypes", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAllFlightTypes))
}

// FindAllRejectedAirlines mocks base method.
func (m *MockAdminAirlineRepostory) FindAllRejectedAirlines() ([]model.Airline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRejectedAirlines")
	ret0, _ := ret[0].([]model.Airline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRejectedAirlines indicates an expected call of FindAllRejectedAirlines.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAllRejectedAirlines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRejectedAirlines", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAllRejectedAirlines))
}

// FindAllSchedules mocks base method.
func (m *MockAdminAirlineRepostory) FindAllSchedules() []*model.Schedule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllSchedules")
	ret0, _ := ret[0].([]*model.Schedule)
	return ret0
}

// FindAllSchedules indicates an expected call of FindAllSchedules.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindAllSchedules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllSchedules", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindAllSchedules))
}

// FindBookedSeatsByChartID mocks base method.
func (m *MockAdminAirlineRepostory) FindBookedSeatsByChartID(arg0 uint) (*model.BookedSeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookedSeatsByChartID", arg0)
	ret0, _ := ret[0].(*model.BookedSeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookedSeatsByChartID indicates an expected call of FindBookedSeatsByChartID.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindBookedSeatsByChartID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookedSeatsByChartID", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindBookedSeatsByChartID), arg0)
}

// FindFlightByFlightNumber mocks base method.
func (m *MockAdminAirlineRepostory) FindFlightByFlightNumber(arg0 string) (*model.FlightFleets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlightByFlightNumber", arg0)
	ret0, _ := ret[0].(*model.FlightFleets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlightByFlightNumber indicates an expected call of FindFlightByFlightNumber.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindFlightByFlightNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlightByFlightNumber", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindFlightByFlightNumber), arg0)
}

// FindFlightChart mocks base method.
func (m *MockAdminAirlineRepostory) FindFlightChart(string2, string3 string) (model.FlightChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlightChart", string2, string3)
	ret0, _ := ret[0].(model.FlightChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlightChart indicates an expected call of FindFlightChart.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindFlightChart(string2, string3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlightChart", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindFlightChart), string2, string3)
}

// FindFlightChartById mocks base method.
func (m *MockAdminAirlineRepostory) FindFlightChartById(id int) (model.FlightChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlightChartById", id)
	ret0, _ := ret[0].(model.FlightChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlightChartById indicates an expected call of FindFlightChartById.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindFlightChartById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlightChartById", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindFlightChartById), id)
}

// FindFlightFleetById mocks base method.
func (m *MockAdminAirlineRepostory) FindFlightFleetById(id int) (*model.FlightFleets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlightFleetById", id)
	ret0, _ := ret[0].(*model.FlightFleets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlightFleetById indicates an expected call of FindFlightFleetById.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindFlightFleetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlightFleetById", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindFlightFleetById), id)
}

// FindFlightScheduleByAirport mocks base method.
func (m *MockAdminAirlineRepostory) FindFlightScheduleByAirport(airport string, date time.Time, id int) ([]*model.FlightChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlightScheduleByAirport", airport, date, id)
	ret0, _ := ret[0].([]*model.FlightChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlightScheduleByAirport indicates an expected call of FindFlightScheduleByAirport.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindFlightScheduleByAirport(airport, date, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlightScheduleByAirport", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindFlightScheduleByAirport), airport, date, id)
}

// FindFlightScheduleID mocks base method.
func (m *MockAdminAirlineRepostory) FindFlightScheduleID(id int) (*model.FlightChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlightScheduleID", id)
	ret0, _ := ret[0].(*model.FlightChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlightScheduleID indicates an expected call of FindFlightScheduleID.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindFlightScheduleID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlightScheduleID", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindFlightScheduleID), id)
}

// FindFlightSeatByID mocks base method.
func (m *MockAdminAirlineRepostory) FindFlightSeatByID(id int) (*model.FlightFleets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlightSeatByID", id)
	ret0, _ := ret[0].(*model.FlightFleets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlightSeatByID indicates an expected call of FindFlightSeatByID.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindFlightSeatByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlightSeatByID", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindFlightSeatByID), id)
}

// FindFlightTypeByID mocks base method.
func (m *MockAdminAirlineRepostory) FindFlightTypeByID(id int32) (*model.FlightTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlightTypeByID", id)
	ret0, _ := ret[0].(*model.FlightTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlightTypeByID indicates an expected call of FindFlightTypeByID.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindFlightTypeByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlightTypeByID", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindFlightTypeByID), id)
}

// FindFlightTypeByModel mocks base method.
func (m *MockAdminAirlineRepostory) FindFlightTypeByModel(model string) (*model.FlightTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlightTypeByModel", model)
	//ret0, _ := ret[0].(*model.FlightTypeModel)
	ret1, _ := ret[1].(error)
	return nil, ret1
}

// FindFlightTypeByModel indicates an expected call of FindFlightTypeByModel.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindFlightTypeByModel(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlightTypeByModel", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindFlightTypeByModel), model)
}

// FindFlightsFromAirport mocks base method.
func (m *MockAdminAirlineRepostory) FindFlightsFromAirport(depAirport string, depTime time.Time) ([]*model.FlightChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlightsFromAirport", depAirport, depTime)
	ret0, _ := ret[0].([]*model.FlightChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlightsFromAirport indicates an expected call of FindFlightsFromAirport.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindFlightsFromAirport(depAirport, depTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlightsFromAirport", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindFlightsFromAirport), depAirport, depTime)
}

// FindFlightsFromDep mocks base method.
func (m *MockAdminAirlineRepostory) FindFlightsFromDep(depAirport, depDate string) ([]*model.FlightChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlightsFromDep", depAirport, depDate)
	ret0, _ := ret[0].([]*model.FlightChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlightsFromDep indicates an expected call of FindFlightsFromDep.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindFlightsFromDep(depAirport, depDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlightsFromDep", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindFlightsFromDep), depAirport, depDate)
}

// FindLastArrivedAirport mocks base method.
func (m *MockAdminAirlineRepostory) FindLastArrivedAirport(flightNumber string) (*model.FlightChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastArrivedAirport", flightNumber)
	ret0, _ := ret[0].(*model.FlightChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastArrivedAirport indicates an expected call of FindLastArrivedAirport.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindLastArrivedAirport(flightNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastArrivedAirport", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindLastArrivedAirport), flightNumber)
}

// FindLastFlightInDB mocks base method.
func (m *MockAdminAirlineRepostory) FindLastFlightInDB() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastFlightInDB")
	ret0, _ := ret[0].(int)
	return ret0
}

// FindLastFlightInDB indicates an expected call of FindLastFlightInDB.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindLastFlightInDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastFlightInDB", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindLastFlightInDB))
}

// FindScheduleByID mocks base method.
func (m *MockAdminAirlineRepostory) FindScheduleByID(id int) (*model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindScheduleByID", id)
	ret0, _ := ret[0].(*model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindScheduleByID indicates an expected call of FindScheduleByID.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindScheduleByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindScheduleByID", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindScheduleByID), id)
}

// FindSeatsByChartID mocks base method.
func (m *MockAdminAirlineRepostory) FindSeatsByChartID(arg0 uint) (*model.BookedSeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSeatsByChartID", arg0)
	ret0, _ := ret[0].(*model.BookedSeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSeatsByChartID indicates an expected call of FindSeatsByChartID.
func (mr *MockAdminAirlineRepostoryMockRecorder) FindSeatsByChartID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSeatsByChartID", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).FindSeatsByChartID), arg0)
}

// GetFlightChartForAirline mocks base method.
func (m *MockAdminAirlineRepostory) GetFlightChartForAirline(string2 uint) ([]model.FlightChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightChartForAirline", string2)
	ret0, _ := ret[0].([]model.FlightChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightChartForAirline indicates an expected call of GetFlightChartForAirline.
func (mr *MockAdminAirlineRepostoryMockRecorder) GetFlightChartForAirline(string2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightChartForAirline", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).GetFlightChartForAirline), string2)
}

// GetFlightFleet mocks base method.
func (m *MockAdminAirlineRepostory) GetFlightFleet(string2 uint, string3 string) (model.FlightFleets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightFleet", string2, string3)
	ret0, _ := ret[0].(model.FlightFleets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightFleet indicates an expected call of GetFlightFleet.
func (mr *MockAdminAirlineRepostoryMockRecorder) GetFlightFleet(string2, string3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightFleet", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).GetFlightFleet), string2, string3)
}

// GetFlightFleets mocks base method.
func (m *MockAdminAirlineRepostory) GetFlightFleets(string2 uint) ([]model.FlightFleets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightFleets", string2)
	ret0, _ := ret[0].([]model.FlightFleets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightFleets indicates an expected call of GetFlightFleets.
func (mr *MockAdminAirlineRepostoryMockRecorder) GetFlightFleets(string2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightFleets", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).GetFlightFleets), string2)
}

// InitialAirlinePassword mocks base method.
func (m *MockAdminAirlineRepostory) InitialAirlinePassword(airline *model.Airline) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialAirlinePassword", airline)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitialAirlinePassword indicates an expected call of InitialAirlinePassword.
func (mr *MockAdminAirlineRepostoryMockRecorder) InitialAirlinePassword(airline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialAirlinePassword", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).InitialAirlinePassword), airline)
}

// UnlockAirlineAccount mocks base method.
func (m *MockAdminAirlineRepostory) UnlockAirlineAccount(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockAirlineAccount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockAirlineAccount indicates an expected call of UnlockAirlineAccount.
func (mr *MockAdminAirlineRepostoryMockRecorder) UnlockAirlineAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockAirlineAccount", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).UnlockAirlineAccount), arg0)
}

// UpdateAirlinePassword mocks base method.
func (m *MockAdminAirlineRepostory) UpdateAirlinePassword(airline *model.Airline) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAirlinePassword", airline)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAirlinePassword indicates an expected call of UpdateAirlinePassword.
func (mr *MockAdminAirlineRepostoryMockRecorder) UpdateAirlinePassword(airline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAirlinePassword", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).UpdateAirlinePassword), airline)
}

// UpdateBookedSeats mocks base method.
func (m *MockAdminAirlineRepostory) UpdateBookedSeats(seat model.BookedSeat, int2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookedSeats", seat, int2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookedSeats indicates an expected call of UpdateBookedSeats.
func (mr *MockAdminAirlineRepostoryMockRecorder) UpdateBookedSeats(seat, int2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookedSeats", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).UpdateBookedSeats), seat, int2)
}

// UpdateBusinessBookedSeat mocks base method.
func (m *MockAdminAirlineRepostory) UpdateBusinessBookedSeat(seat int, seats model.BookedSeat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusinessBookedSeat", seat, seats)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBusinessBookedSeat indicates an expected call of UpdateBusinessBookedSeat.
func (mr *MockAdminAirlineRepostoryMockRecorder) UpdateBusinessBookedSeat(seat, seats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessBookedSeat", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).UpdateBusinessBookedSeat), seat, seats)
}

// UpdateBusinessBookedSeats mocks base method.
func (m *MockAdminAirlineRepostory) UpdateBusinessBookedSeats(arg0 []byte, arg1 *model.BookedSeat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusinessBookedSeats", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBusinessBookedSeats indicates an expected call of UpdateBusinessBookedSeats.
func (mr *MockAdminAirlineRepostoryMockRecorder) UpdateBusinessBookedSeats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessBookedSeats", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).UpdateBusinessBookedSeats), arg0, arg1)
}

// UpdateBusinessSeatNo mocks base method.
func (m *MockAdminAirlineRepostory) UpdateBusinessSeatNo(arg0 int, arg1 *model.BookedSeat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusinessSeatNo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBusinessSeatNo indicates an expected call of UpdateBusinessSeatNo.
func (mr *MockAdminAirlineRepostoryMockRecorder) UpdateBusinessSeatNo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessSeatNo", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).UpdateBusinessSeatNo), arg0, arg1)
}

// UpdateEconomyBookedSeat mocks base method.
func (m *MockAdminAirlineRepostory) UpdateEconomyBookedSeat(seat int, seats model.BookedSeat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEconomyBookedSeat", seat, seats)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEconomyBookedSeat indicates an expected call of UpdateEconomyBookedSeat.
func (mr *MockAdminAirlineRepostoryMockRecorder) UpdateEconomyBookedSeat(seat, seats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEconomyBookedSeat", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).UpdateEconomyBookedSeat), seat, seats)
}

// UpdateEconomyBookedSeats mocks base method.
func (m *MockAdminAirlineRepostory) UpdateEconomyBookedSeats(arg0 []byte, arg1 *model.BookedSeat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEconomyBookedSeats", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEconomyBookedSeats indicates an expected call of UpdateEconomyBookedSeats.
func (mr *MockAdminAirlineRepostoryMockRecorder) UpdateEconomyBookedSeats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEconomyBookedSeats", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).UpdateEconomyBookedSeats), arg0, arg1)
}

// UpdateEconomySeatNo mocks base method.
func (m *MockAdminAirlineRepostory) UpdateEconomySeatNo(arg0 int, arg1 *model.BookedSeat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEconomySeatNo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEconomySeatNo indicates an expected call of UpdateEconomySeatNo.
func (mr *MockAdminAirlineRepostoryMockRecorder) UpdateEconomySeatNo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEconomySeatNo", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).UpdateEconomySeatNo), arg0, arg1)
}

// UpdateFlightChart mocks base method.
func (m *MockAdminAirlineRepostory) UpdateFlightChart(chart model.FlightChart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlightChart", chart)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFlightChart indicates an expected call of UpdateFlightChart.
func (mr *MockAdminAirlineRepostoryMockRecorder) UpdateFlightChart(chart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlightChart", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).UpdateFlightChart), chart)
}

// UpdateFlightType mocks base method.
func (m *MockAdminAirlineRepostory) UpdateFlightType(arg0 *model.FlightTypeModel, arg1 int) (*model.FlightTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlightType", arg0, arg1)
	ret0, _ := ret[0].(*model.FlightTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlightType indicates an expected call of UpdateFlightType.
func (mr *MockAdminAirlineRepostoryMockRecorder) UpdateFlightType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlightType", reflect.TypeOf((*MockAdminAirlineRepostory)(nil).UpdateFlightType), arg0, arg1)
}
